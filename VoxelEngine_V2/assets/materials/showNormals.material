
#Name
{
	name_is_not_used_yet
}

#Attributes
{
	vec3 m_position 	: 0
	vec3 m_normal 		: 2
	vec3 m_tangent 		: 6
}

#Include
{
	_UBO.glsl,
	_uniforms.glsl,
	_Math.glsl
}

#Properties
{
	uniform float normal_length 	= 0.75;
}

#Vertex
{
	// Output
	out vertex_data
	{
		vec3 normal;
		vec3 tangent;
		
	} v_data;
	
	// Main
	void main()
	{
		if(VXL_useModel)
			gl_Position = VXL_model * vec4(m_position, 1);
		else
			gl_Position = vec4(m_position, 1);
	
		v_data.normal = VXL_normalMatrix * m_normal;
		v_data.tangent = VXL_normalMatrix * m_tangent;
	}
}

#Geometry
{
	// Geometry Logic
	layout(triangles) in; 
	layout(line_strip, max_vertices=18) out;
	// Converts [Triangle] into [3 Lines]

	// Input
	in vertex_data
	{
		vec3 normal;
		vec3 tangent;

	} v_data[];

	// Output
	out vec4 v_color;

	// Main
	void drawLine(vec4 pos1, vec4 pos2, vec4 color)
	{
		// Normal
		gl_Position = pos1;
		v_color = color;
		EmitVertex();
		
		gl_Position = pos2;
		v_color = color;
		EmitVertex();
		
		EndPrimitive();
	}
	void main()
	{
		int i;
		for(i=0; i< gl_in.length(); i++)
		{
			vec3 P = gl_in[i].gl_Position.xyz;
			vec3 N = normalize(v_data[i].normal);
			vec3 T = normalize(v_data[i].tangent);
			vec3 B = cross(N, T);
			
			// Normal
			drawLine(
				UBO_viewProjection * vec4(P, 1.0),
				UBO_viewProjection * vec4(P + N * normal_length, 1.0),
				vec4(0,0,1,1)
			);
			// Tangent
			drawLine(
				UBO_viewProjection * vec4(P, 1.0),
				UBO_viewProjection * vec4(P + T * normal_length, 1.0),
				vec4(0,1,0,1)
			);
			// Bitangent
			drawLine(
				UBO_viewProjection * vec4(P, 1.0),
				UBO_viewProjection * vec4(P + B * normal_length, 1.0),
				vec4(1,0,0,1)
			);
		}
	}
}

#Fragment
{
	// Input
	in vec4 v_color;

	// Output
	layout (location = 0) out vec4 output_albedo;

	// Uniforms

	// Main
	void main()
	{
		output_albedo = v_color;
	}
}