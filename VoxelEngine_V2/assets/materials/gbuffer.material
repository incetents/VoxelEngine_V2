// Copyright(c) 2019 Emmanuel Lajeunesse

#Name { gbuffer }

#Include
{
	_UBO.glsl,
	_Uniforms.glsl
}

#Attributes
{
	vec3 m_position 	: 0
	vec2 m_uv 			: 1
	vec3 m_normal 		: 2
	vec3 m_tangent 		: 6
	mat4 instanceMatrix : 8
}

#Link
{
	vec3 pos;
	vec2 uv;
	vec3 normal;
	vec3 tangent;
	vec3 bitangent;
}

#RenderTargets
{
	vec4 output_albedo 		: 0
	vec4 output_normal 		: 1
	vec4 output_reflection 	: 2
}

#Samplers
{
	// Uniform Textures
	sampler2D albedo_handler : 0
}

#Properties // Uniforms and Functions
{
}

#Vertex // Main
{
	// Model
	if(VXL_useModel)
	{
		if(VXL_useInstancing)
		{
			gl_Position = VXL_mvp * instanceMatrix * vec4(m_position, 1.0); 
			vert_out.pos = vec3(VXL_model * instanceMatrix * vec4(m_position, 1.0));
		}
		else
		{
			gl_Position = VXL_mvp * vec4(m_position, 1.0); 
			vert_out.pos = vec3(VXL_model * vec4(m_position, 1.0));
		}
	
		vert_out.normal = VXL_normalMatrix * m_normal;
		vert_out.tangent = VXL_normalMatrix * m_tangent;
	}
	// Passthrough
	else
	{
		gl_Position = UBO_viewProjection * vec4(m_position, 1.0); 
		vert_out.pos = m_position;
		
		vert_out.normal = m_normal;
		vert_out.tangent = m_tangent;
	}
	
	// Constants
	vert_out.uv = m_uv;
	vert_out.bitangent = cross(vert_out.normal, vert_out.tangent);
}

#Fragment // Main
{
	output_albedo = vec4(0,0,0,VXL_alpha);

	if(VXL_useTexture)
	{
		output_albedo.rgb = texture(albedo_handler, frag_in.uv).rgb;
	}
	
	output_albedo.rgb = output_albedo.rgb * VXL_tint + VXL_color;
			
			
	output_normal = vec4(normalize(frag_in.normal), 1); // worldspace Normals

	output_reflection = vec4(0,0,0,1);
}
