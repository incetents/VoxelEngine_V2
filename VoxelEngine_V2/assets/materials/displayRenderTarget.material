// Copyright(c) 2019 Emmanuel Lajeunesse

#Name { displayRenderTarget }

#Include
{
	_Core.glsl,
	_Math.glsl
}

#Attributes
{
	vec3 m_position 	: 0
	vec2 m_uv 			: 1
}

#Link
{
	vec3 pos;
	vec2 uv;
}

#RenderTargets
{
	vec4 output_color 	: 0
}

#Samplers
{
	// Uniform Textures
	sampler2D texture1 : 0
	sampler2D texture2 : 1
}

#Properties // Uniforms and Functions
{
	// Uniforms
	uniform int outputMode = 0;
	uniform int channelOutput = 0;
	
	// Puts depth into linear space
	float LinearizeDepth(float depth, float zNear, float zFar)
	{
		return (2.0 * zNear * zFar) / (zFar + zNear - (2.0 * depth - 1.0) * (zFar - zNear));
	}
	// Visualize depth buffer
	float VisualizeDepth(float depth)
	{
		depth = depth * depth;
		depth = depth * depth;
		depth = depth * depth;
		depth = depth * depth;
		depth = depth * depth;
		depth = depth * depth;
		depth = depth * depth;
		depth = depth * depth;
		depth = depth * depth;
		return depth;
	}
}

#Vertex
{
	vert_out.pos = m_position;
	vert_out.uv = m_uv;
	gl_Position = vec4(m_position, 1.0);
}

#Fragment
{
	vec4 _texture = texture(texture1, frag_in.uv);
	// Output Mode
	if(outputMode == 1)
	{
		// normal
		_texture.rgb = abs(_texture.rgb); // make it visible on both sides
		output_color = _texture;
	}
	else if(outputMode == 2)
	{
		// depth
		float depth = VisualizeDepth(_texture.r);
		output_color = vec4(depth,depth,depth,1);
	}
	else if(outputMode == 3)
	{
		// composite 2 textures
		vec4 _texture2 = texture(texture2, frag_in.uv);
		output_color = vec4(mix(_texture.rgb, _texture2.rgb, _texture2.a), 1);
	}
	else if(outputMode == 4)
	{
		// COLOR // convert to readable HSL regardless of color
		float Hue = dot(_texture.rgb, vec3(8794.0f)); 
		output_color = vec4(HSV_TO_RGB(Hue, 0.75f, 1),1);
	}
	else // == 0
		// normal
		output_color = _texture;
		
	// Final output specialized
	if(channelOutput == 1)
	{
		output_color.rgb = output_color.rrr;
	}
	else if(channelOutput == 2)
	{
		output_color.rgb = output_color.ggg;
	}
	else if(channelOutput == 3)
	{
		output_color.rgb = output_color.bbb;
	}
	else if(channelOutput == 4)
	{
		output_color.rgb = output_color.aaa;
	}
	
	// gamma fix
	//output_color.r = linear_to_srgb(output_color.r);
	//output_color.g = linear_to_srgb(output_color.g);
	//output_color.b = linear_to_srgb(output_color.b);
	
	output_color.a = 1.0;
}
