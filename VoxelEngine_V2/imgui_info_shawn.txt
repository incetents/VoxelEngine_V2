ImGuiViewport* viewport = ImGui::GetMainViewport();
if (viewport->Size.x > 0 && viewport->Size.y > 0) {
    ImGui::SetNextWindowPos(viewport->Pos);
    ImGui::SetNextWindowSize(viewport->Size);
    ImGui::SetNextWindowViewport(viewport->ID);
    ImGuiWindowFlags window_flags = ImGuiWindowFlags_MenuBar | ImGuiWindowFlags_NoDocking;
    window_flags |= ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoMove;
    window_flags |= ImGuiWindowFlags_NoBringToFrontOnFocus | ImGuiWindowFlags_NoNavFocus | ImGuiWindowFlags_NoBackground;

    ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 0.0f);
    ImGui::PushStyleVar(ImGuiStyleVar_WindowBorderSize, 0.0f);
    ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(0.0f, 0.0f));
    ImGui::PushStyleColor(ImGuiCol_WindowBg, { 0,0,0,0 });
    ImGui::Begin("Docker Window", nullptr, window_flags);
    ImGui::PopStyleVar(3);
    ImGui::PopStyleColor();

    ImGuiDockNodeFlags dockspaceFlags = ImGuiDockNodeFlags_None;
    ImGuiID dockspaceID = ImGui::GetID("MainDocker");
    if (!ImGui::DockBuilderGetNode(dockspaceID)) {
        ImGui::DockBuilderRemoveNode(dockspaceID);
        ImGui::DockBuilderAddNode(dockspaceID, ImGuiDockNodeFlags_None);
        ImGui::DockBuilderSetNodeSize(dockspaceID, viewport->Size);
        ImGuiID dock_main_id       = dockspaceID;
        ImGuiID dock_right_id      = ImGui::DockBuilderSplitNode(dock_main_id, ImGuiDir_Right, 0.2f, nullptr, &dock_main_id);
        ImGuiID dock_left_id       = ImGui::DockBuilderSplitNode(dock_main_id, ImGuiDir_Left,  0.2f, nullptr, &dock_main_id);
        ImGuiID dock_down_id       = ImGui::DockBuilderSplitNode(dock_main_id, ImGuiDir_Down,  0.2f, nullptr, &dock_main_id);
        ImGuiID dock_down_right_id = ImGui::DockBuilderSplitNode(dock_down_id, ImGuiDir_Right, 0.6f, nullptr, &dock_down_id);

        ImGui::DockBuilderDockWindow("Scene Settings", dock_right_id);
        ImGui::DockBuilderDockWindow("Scene",          dock_left_id);
        ImGui::DockBuilderDockWindow("Materials",      dock_down_id);
        ImGui::DockBuilderDockWindow("Game View",      dock_main_id);
        ImGui::DockBuilderDockWindow("Models",         dock_down_right_id);
        
        ImGui::DockBuilderFinish(dock_main_id);
    }
    ImGui::DockBuilderSetNodeSize(dockspaceID, viewport->Size);
    ImGui::DockSpace(dockspaceID, ImVec2(0.0f, 0.0f), 0);
    ImGui::End();

    DrawGameWindow(deltaTime);
}
void Editor::DrawGameWindow(float deltaTime) {
    ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 0.0f);
    ImGui::PushStyleVar(ImGuiStyleVar_WindowBorderSize, 0.0f);
    ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(0.0f, 0.0f));
    ImGuiWindowFlags window_flags = 0;
    window_flags |= ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoBackground;
    window_flags |= ImGuiWindowFlags_NoBringToFrontOnFocus | ImGuiWindowFlags_NoMove;


    ImGuiViewport* viewport = ImGui::GetMainViewport();

    ImVec2 rootPos = viewport->Pos;
    ImVec2 rootSize = viewport->Size;

    ImGui::PushStyleColor(ImGuiCol_WindowBg, { 0,0,0,0 });
    ImGui::Begin("Game View", nullptr, window_flags);
    ImVec2 subPos = ImGui::GetWindowPos();
    ImVec2 relPos = { subPos.x - rootPos.x, subPos.y - rootPos.y };
    ImVec2 size = ImGui::GetWindowSize();
    myGame->myViewport = glm::vec4(relPos.x, rootSize.y - relPos.y - size.y, size.x, size.y);
    ImGui::End();
    ImGui::PopStyleVar(3);
    ImGui::PopStyleColor();
}